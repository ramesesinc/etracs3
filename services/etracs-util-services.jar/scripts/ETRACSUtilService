import com.rameses.annotations.*
import java.math.BigDecimal 

public class ETRACSUtilService 
{
	@PersistenceContext('main')
	def em
	
	@Service('Var')
	def var;
	
	@Service('DateService')
	def dateService;
	
	@Service('NumberService') 
	def numSvc
	
	@Env
	def env;
	
	@ProxyMethod
	public def getListFromQuery( namedQuery , filters, params, pagingKeys ) {
		if( params._start == null ) params._start = 0
		if( params._limit == null ) params._limit = 50 

		def qry = em.sqlContext.createNamedQuery( namedQuery )
		
		if( ! filters ) filters = [[]]
		def result = []
		for( int i=0; i<filters.size();i++) {
			if( filters[i] ) {
				qry.setVars( [filters:filters[i].join('AND' )])
			}
			else {
				qry.setVars( [filters:''])
			}
			
			if( pagingKeys ) qry.setPagingKeys( pagingKeys )
			
			result = qry.setParameters( params )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList
			if( result ) break
		}
		return result 
	}
	
	@ProxyMethod 
	public def getListByQuery(namedQuery, criteria, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(criteria)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	@ProxyMethod 
	public def getListByVar(namedQuery, criteria, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery )
					.setVars( criteria )
					.setParameters(criteria)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	@ProxyMethod
	public boolean toBoolean( value, defaultvalue ) {
		if( value == null ) return defaultvalue
		if( value instanceof Boolean ) return value 
		return '1/y/yes/true/t'.indexOf( value.toString().trim().toLowerCase() ) >= 0
	}
	
	@ProxyMethod
	public def toDecimal( value, defaultvalue ) {
		if( value == null ) return defaultvalue
		if( value instanceof BigDecimal ) return value 
		try {
			if ( value instanceof Number ) {
				return new BigDecimal( numSvc.format('0.00',value ))
			}
			return new BigDecimal( value+'')
		}
		catch( e ) {
			println '='*50
			e.printStackTrace()
			return defaultvalue 
		}
	}
	
	@ProxyMethod
	public def toInteger( value, defaultvalue ) {
		return toDecimal(value, defaultvalue).intValue()
	}
	
	@ProxyMethod
	public boolean isTrue( value ) {
		return TO_BOOLEAN( value, false ) == true 
	}
	
	
	@ProxyMethod
	public void required(field, value ) {
		if( ! value ) throw new Exception(field + ' is required.')
	}
	
	@ProxyMethod
	public void checkDuplicateFieldValue(caption, tablename, fieldname, entity)	{
		def sql = 'SELECT COUNT(*) AS count FROM ' + tablename + ' WHERE objid <> $P{objid} AND ' + fieldname + ' = $P{fieldvalue} '
		def data = em.sqlContext.createQuery(sql)
							.setParameter('objid', entity.objid)
							.setParameter('fieldname', fieldname)
							.setParameter('fieldvalue', entity[fieldname])
							.singleResult
		if( data.count > 0 ){
			throw new Exception(caption + ' ' + entity[fieldname] + ' already exists.')
		}
	}
	
	
	
	
	
	/*==================================================================
	** 
	** METHODS FOR DEPRECAITION
	**
	==================================================================*/
	
	@ProxyMethod
	public void updateSysInfo( entity ) {
		entity.sys_lastupdate = dateService.currentTimeStamp;
		entity.sys_lastupdateby = (env.USERID ? env.USERID : 'SYSTEM');
	}
	
	@ProxyMethod
	public void validateLastUpdate( entity, oldentity ) {
		if( oldentity && entity.sys_lastupdate && entity.sys_lastupdate != oldentity.sys_lastupdate ) {
			throw new Exception("Document has already been edited by $oldentity.sys_lastupdateby.\nPlease reload.");
		}
		updateSysInfo( entity );
	}
	
	@ProxyMethod
	public def acceptMsg(  domain ) {
		return ( domain == var.lgu_index );
	}
	
	@ProxyMethod
	public void checkDuplicateError( count, message ) {
		if( count > 0 ) throw new Exception( message );
	}
}