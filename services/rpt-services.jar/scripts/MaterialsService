import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class MaterialsService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'materials';
	def final SCHEMA_VERSION = '1.0';

	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE materialcode LIKE $P{search}'],
				[' WHERE materialdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('materials:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def getLookupList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE materialcode LIKE $P{search}'],
				[' WHERE materialdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('materials:getLookupList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'materials:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( material ) {
		return open( material.objid )	
	}
	
	@ProxyMethod
	public def saveCreate( material ){
		material.objid = "MAT" + new UID();
		material.schemaname = SCHEMA_NAME;
		material.schemaversion = SCHEMA_VERSION;
		validate( material );
		em.create( material.schemaname, material );
		return material;
	}
	
	@ProxyMethod
	public def saveUpdate( material ){
		validate( material );
		em.update( material.schemaname, material)
		return material;
	}
	
	@ProxyMethod
	public def remove( material ){
		em.delete( material.schemaname, material )
		return material
	}
	
	
	private void validate( material ){
		em.validate(material.schemaname, material);
		utilSvc.checkDuplicateFieldValue('Code', 'materials', 'materialcode', material)
		utilSvc.checkDuplicateFieldValue('Material', 'materials', 'materialdesc', material)
	}
	
}
