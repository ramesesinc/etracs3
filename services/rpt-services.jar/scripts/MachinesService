import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class MachinesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME  = 'machines';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE machinecode LIKE $P{search}'],
				[' WHERE machinedesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('machines:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'machines:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( machine ) {
		return open( machine.objid)	
	}
	
	@ProxyMethod
	public def saveCreate( machine ){
		machine.objid = "MACH" + new UID();
		machine.schemaname = SCHEMA_NAME;
		machine.schemaversion = SCHEMA_VERSION;
		validate( machine );
		em.create( machine.schemaname, machine );
		return machine;
	}
	
	@ProxyMethod
	public def saveUpdate( machine ){
		validate( machine );
		em.update( machine.schemaname, machine)
		return machine;
	}
	
	@ProxyMethod
	public def remove( machine ){
		em.delete( machine.schemaname, machine );
		return machine
	}
	
	
	private void validate( machine ){
		em.validate(machine.schemaname, machine);
		utilSvc.checkDuplicateFieldValue('Code', 'machines', 'machinecode', machine)
		utilSvc.checkDuplicateFieldValue('Machine', 'machines', 'machinedesc', machine)
	}
	
}
