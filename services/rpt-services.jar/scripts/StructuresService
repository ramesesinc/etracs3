import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class StructuresService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'structures';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE structurecode LIKE $P{search}'],
				[' WHERE structuredesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('structures:getList', filters, params, 'o.objid')
	}
    
    @ProxyMethod
    public List lookupStructureMaterials( structureid, searchText, params) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE materialcode LIKE $P{search}'],
				[' WHERE materialdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('structures:getMaterialList', filters, params, 'o.objid')
    }
	
	@ProxyMethod
	public def open( objid ){
		def structure = em.sqlContext.createNamedQuery( 'structures:getById' ).setParameter( 'objid', objid ).singleResult;
		if( structure ) return em.read( schemaname, structure );
		
		return null;
	}

	@ProxyMethod
	public def read( structure ) {
		return open(structure.objid)	
	}
	
	@ProxyMethod
	public def saveCreate( structure ){
		structure.objid = "ST" + new UID();
		structure.schemaname = SCHEMA_NAME;
		structure.schemaversion = SCHEMA_VERSION;
		validate( structure );
		em.create( structure.schemaname, structure );
		return structure;
	}
	
	@ProxyMethod
	public def saveUpdate( structure ){
		validate( structure );
		em.update( structure.schemaname, structure)
		return structure;
	}
	
	@ProxyMethod
	public def remove( structure ){
		em.delete( structure.schemaname, structure );
		return structure
	}
	
	
	private void validate( structure ){
		em.validate(structure.schemaname, structure);
		utilSvc.checkDuplicateFieldValue('Code', 'structures', 'structurecode', structure)
		utilSvc.checkDuplicateFieldValue('Structure', 'structures', 'structuredesc', structure)
	}
	
}
