import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class PlantsandTreesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'plantsandtrees';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE planttreecode LIKE $P{search}'],
				[' WHERE planttreedesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('plantsandtrees:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'plantsandtrees:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( planttree ) {
		return open(planttree.objid)	
	}
	
	@ProxyMethod
	public def saveCreate( planttree ){
		planttree.objid = "PT" + new UID();
		planttree.schemaname = SCHEMA_NAME;
		planttree.schemaversion = SCHEMA_VERSION;
		validate( planttree );
		em.create( planttree.schemaname, planttree );
		
		return planttree;
	}
	
	@ProxyMethod
	public def saveUpdate( planttree ){
		validate( planttree );
		em.update( planttree.schemaname, planttree)
		return planttree;
	}
	
	@ProxyMethod
	public def remove( planttree ){
		em.delete( planttree.schemaname, planttree );
		return planttree
	}
	
	
	private void validate( planttree ){
		em.validate(planttree.schemaname, planttree)
		utilSvc.checkDuplicateFieldValue('Code', 'plantsandtrees', 'planttreecode', planttree)
		utilSvc.checkDuplicateFieldValue('Plant/Tree', 'plantsandtrees', 'planttreedesc', planttree)
	}
}
