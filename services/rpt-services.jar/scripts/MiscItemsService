import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class MiscItemsService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'miscitems';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE misccode LIKE $P{search}'],
				[' WHERE miscdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('miscitems:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'miscitems:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def read( miscitem ) {
		return open(miscitem.objid)	
	}

	@ProxyMethod
	public def saveCreate( miscitem ){
		miscitem.objid = "MISC" + new UID();
		miscitem.schemaname = SCHEMA_NAME;
		miscitem.schemaversion = SCHEMA_VERSION;
		validate( miscitem );
		em.create( miscitem.schemaname, miscitem );
		return miscitem;
	}
	
	@ProxyMethod
	public def saveUpdate( miscitem ){
		validate( miscitem );
		em.update( miscitem.schemaname, miscitem)
		return miscitem;
	}
	
	@ProxyMethod
	public def remove( miscitem ){
		em.delete( miscitem.schemaname, miscitem );
		return miscitem 
	}
	
	private void validate( miscitem ){
		em.validate(miscitem.schemaname, miscitem);
		utilSvc.checkDuplicateFieldValue('Code', 'miscitems', 'misccode', miscitem)
		utilSvc.checkDuplicateFieldValue('Code', 'miscitems', 'miscdesc', miscitem)
	}
	
}
