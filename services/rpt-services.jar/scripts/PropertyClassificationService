import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class PropertyClassificationService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'propertyclassification';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE propertycode LIKE $P{search}'],
				[' WHERE propertydesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('propertyclassification:getList', filters, params, 'o.objid')
	}
    
    @ProxyMethod
    public List lookup( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE propertycode LIKE $P{search}'],
				[' WHERE propertydesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('propertyclassification:lookupList', filters, params, 'o.objid')
    }
	
	@ProxyMethod
	public def open( objid  ){
		return em.sqlContext.createNamedQuery( 'propertyclassification:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( propertyclass ){
		return open( propertyclass.objid )
	}
	
	@ProxyMethod
	public def saveCreate( propertyclass ){
		propertyclass.objid = "PC" + new UID();
		propertyclass.schemaname = SCHEMA_NAME;
		propertyclass.schemaversion = SCHEMA_VERSION;
		validate( propertyclass );
		em.create( propertyclass.schemaname, propertyclass );
		return propertyclass;
	}
	
	@ProxyMethod
	public def saveUpdate( propertyclass ){
		validate( propertyclass )
		em.update( propertyclass.schemaname, propertyclass)
		return propertyclass
	}
	
	@ProxyMethod
	public def remove( propertyclass ){
		checkReferencedId( propertyclass )
		em.delete( propertyclass.schemaname, propertyclass )
		return propertyclass 
	}

	
	private void validate( propertyclass ){
		em.validate(propertyclass.schemaname, propertyclass)
		utilSvc.checkDuplicateFieldValue('Code', 'propertyclassification', 'propertycode', propertyclass)
		utilSvc.checkDuplicateFieldValue('Classification', 'propertyclassification', 'propertydesc', propertyclass)
	}
	
	private void checkReferencedId( propertyclass ){
		def data = em.sqlContext.createNamedQuery('propertyclassification:checkReferencedLCUVId').setParameter("objid", propertyclass.objid).singleResult
		if( data.count > 0 ) utilSvc.checkDuplicateError( data.count, "Delete not allowed. Property Classification has already been referenced." )
		
		data = em.sqlContext.createNamedQuery('propertyclassification:checkReferencedAgriId').setParameter("objid", propertyclass.objid).singleResult
		if( data.count > 0 ) utilSvc.checkDuplicateError( data.count, "Delete not allowed. $propertyclass.propertydesc has already been referenced." )
		
		def rptsetting = em.sqlContext.createNamedQuery('propertyclassification:checkReferencedSettingId').singleResult;
		def propertyclassifications = em.serializer.read( rptsetting.propertyclassifications );
		propertyclassifications.each{
			if( it.objid == propertyclass.objid )	
				throw new Exception( "Delete not allowed. $propertyclass.propertydesc has already been referenced." )
		}
	}
}
