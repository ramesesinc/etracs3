import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class ExemptionTypesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'exemptiontype';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE exemptcode LIKE $P{search}'],
				[' WHERE exemptdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('exemptiontype:getList', filters, params, 'o.objid')
	}
    
    @ProxyMethod
	public def lookup( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE exemptcode LIKE $P{search}'],
				[' WHERE exemptdesc LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('exemptiontype:lookupList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'exemptiontype:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( exemptiontype  ) {
		return open( exemptiontype.objid )
	}
	
	@ProxyMethod
	public def saveCreate( exemptiontype ){
		exemptiontype.objid = "EX" + new UID();
		exemptiontype.schemaname = SCHEMA_NAME;
		exemptiontype.schemaversion = SCHEMA_VERSION;
		validate( exemptiontype );
		em.create( exemptiontype.schemaname, exemptiontype );
		return exemptiontype;
	}
	
	@ProxyMethod
	public def saveUpdate( exemptiontype ){
		validate( exemptiontype );
		em.update( exemptiontype.schemaname, exemptiontype)
		return exemptiontype;
	}
	
	@ProxyMethod
	public def remove( exemptiontype ){
		em.delete( exemptiontype.schemaname, exemptiontype );
		return exemptiontype
	}
	
	private void validate( exemptiontype ){
		em.validate(exemptiontype.schemaname, exemptiontype);
		utilSvc.checkDuplicateFieldValue('Code', 'exemptiontype', 'exemptcode', exemptiontype)
		utilSvc.checkDuplicateFieldValue('Exemption Type', 'exemptiontype', 'exemptdesc', exemptiontype)
	}
}
