import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class RPTBillingMessageInterceptor 
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
    @Service('RPTBillingService')
    def billingSvc 
	
	@Service('MessagingService')
	def msgSvc
	
	def final REF_TYPE = 'RPTBill'

	@After(pattern='MessagingService.onMessage', eval="#{result.type.matches('rptbill_generate')}") 
	public void interceptOnReceiveRPTBillGenerate( evt ) {
        def msg = evt.result 
		try{
			println 'Processing message -> ' + msg.type 
			billingSvc.generateRemoteRequestedBill( msg )
			logSvc.log(msg.type, REF_TYPE, msg.attachment.sessionid )
			msgSvc.processedSuccessfully(msg) 
		}
		catch( e ) {
			msgSvc.processError( msg, e)
		}
	}

	@After(pattern='MessagingService.onMessage', eval="#{result.type.matches('rptbill_post_generated')}") 
	public void interceptOnReceiveRPTBillPostGenerated( evt ) {
        def msg = evt.result 
		try{
			billingSvc.postRemoteGeneratedBill( msg )
			logSvc.log(msg.type, REF_TYPE, msg.attachment.sessionid  )
			msgSvc.processedSuccessfully(msg) 
		}
		catch( e ) {
			msgSvc.processError( msg, e )
		}
	}
		
}


