import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class CancelTDService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'canceltdreason';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE cancelcode LIKE $P{search}'],
				[' WHERE canceltitle LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('canceltd:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'canceltd:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( canceltd  ) {
		return open( canceltd.objid )	
	}
	
	@ProxyMethod
	public def saveCreate( canceltd ){
		canceltd.objid = "F" + new UID();
		canceltd.schemaname = SCHEMA_NAME;
		canceltd.schemaversion = SCHEMA_VERSION;
		validate( canceltd );
		em.create( canceltd.schemaname, canceltd );
		return canceltd;
	}
	
	@ProxyMethod
	public def saveUpdate( canceltd ){
		validate( canceltd );
		em.update( canceltd.schemaname, canceltd)
		return canceltd;
	}
	
	@ProxyMethod
	public def remove( canceltd ){
		em.delete( canceltd.schemaname, canceltd );
		return canceltd
	}
	
	
	private void validate( canceltd ){
		em.validate(canceltd.schemaname, canceltd);
		utilSvc.checkDuplicateFieldValue('Code', 'canceltdreason', 'cancelcode', canceltd)
		utilSvc.checkDuplicateFieldValue('Cancel Reason', 'canceltdreason', 'canceltitle', canceltd)
	}
	
}
