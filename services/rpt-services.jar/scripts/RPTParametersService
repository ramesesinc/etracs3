import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class RPTParametersService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = 'rptparameters:rptparameters';
	def final SCHEMA_VERSION = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE paramname LIKE $P{search}'],
				[' WHERE paramcaption LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('rptparameters:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'rptparameters:getById' ).setParameter( 'objid', objid ).singleResult;
	}

	@ProxyMethod
	public def read( rptparameter ) {
		return open( rptparameter.objid)	
	}
	
	@ProxyMethod
	public def saveCreate( rptparameter ){
		rptparameter.objid = "PARAM" + new UID();
		rptparameter.schemaname = SCHEMA_NAME;
		rptparameter.schemaversion = SCHEMA_VERSION;
		validate( rptparameter );
		em.create( rptparameter.schemaname, rptparameter );
		return rptparameter;
	}
	
	@ProxyMethod
	public def saveUpdate( rptparameter ){
		validate( rptparameter );
		em.update( rptparameter.schemaname, rptparameter)
		return rptparameter;
	}
	
	@ProxyMethod
	public def remove( rptparameter ){
		em.delete( rptparameter.schemaname, rptparameter );
		return rptparameter
	}
	
	
	private void validate( rptparameter ){
		em.validate(rptparameter.schemaname, rptparameter);
		utilSvc.checkDuplicateFieldValue('Name', 'rptparameters', 'paramname', rptparameter)
	}
}
