import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class VariableService
{
	@PersistenceContext('main')
	def em

	@Service('ETRACSUtilService')
	def utilSvc
	
	def SCHEMA_NAME = 'variable'
	def SCHEMA_VERSION = '1.0'
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if( ! params ) params = [:]
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('variable:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def read( var ) {
		return em.read( SCHEMA_NAME, var )
	}
	
	@ProxyMethod
	public def saveCreate( var ) {
		var.objid = 'V' + new UID()
		var.schemaname = SCHEMA_NAME
		var.schemaversion = SCHEMA_VERSION
		validate( var )
		em.create( var.schemaname, var )
		return var 
	}
	
	@ProxyMethod
	public def saveUpdate( var ) {
		validate( var )
		em.update( var.schemaname, var)
		return var
	}
	
	@ProxyMethod
	public def remove( var ) {
		try {
			em.delete(var.schemaname, var)
			return var 
		}
		catch( e ) {
			throw new Exception('Delete not allowed. Variable has already been referenced.')
		}
	}
	
	@ProxyMethod
	public List getDataTypes() {
		return ['string', 'decimal', 'integer', 'boolean', 'string_array']
	}



	
	private void validate( var ) {
		validateName( var )
		required('Caption', var.caption )
		required('Data Type', var.datatype )
		requireArrayValuesForStringArray( var )
		em.validate( var.schemaname, var )
	}
	
	void validateName( var ) {
		required('Name', var.name )
		//name must start with letter or _
		if( ! var.name.matches('[a-zA-Z_].*') ) {
			throw new Exception('Name must start with a letter or underscore.')
		}
		
		//replace non-alphanumeric values with '_'
		var.name = var.name.trim().replaceAll('\\W', '_')
		utilSvc.checkDuplicateFieldValue('Name', 'variable', 'name', var)
	}
	
	void requireArrayValuesForStringArray( var ) {
		if( var.datatype == 'STRING_ARRAY' && ! var.arrayvalues ) 
			throw new Exception('Array Values are required for STRING_ARRAY data type.')
	}
	
	void required( caption, value ) {
		if( ! value ) throw new Exception(caption + ' is required.')
	}
}
