import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class CollectionTypeService
{
	@PersistenceContext("main")
	def em
	
	def SCHEMANAME = "collectiontype:collectiontype"
	def SCHEMAVERSION = "1.0"
	
	@ProxyMethod
	public def getList( searchText, params ) {
		def result = []
		if ( ! searchText )
			result = em.sqlContext.createNamedQuery("collectiontype:getList").resultList
		else 
			result = em.sqlContext.createNamedQuery("collectiontype:getListByName").setParameter("name", searchText+"%").resultList
		
		return result.each {
			it.payerrequired = it.payerrequired as boolean
		}
	}
	
	@ProxyMethod
	public List getListByAfId( afid ) {
		if( ! afid ) {
			return []
		}
		return em.sqlContext.createNamedQuery('collectiontype:getListByAfId').setParameter('afid', afid ).resultList
	}
	
	@ProxyMethod
	public def read( colltype ) {
		def data = em.read("collectiontype:collectiontype", colltype);
		if (data ) data.payorrequired = data.payorrequired == 1
		return data;
	}
	
	@ProxyMethod
	public def saveCreate( colltype ) {
		colltype.objid = "C" + new UID();
		colltype.schemaname = SCHEMANAME;
		colltype.schemaversion = SCHEMAVERSION;
		validate( colltype );
		em.create( colltype.schemaname, colltype );
		return colltype;
	}
	
	@ProxyMethod
	public def saveUpdate( colltype ) {
		validate( colltype )
		em.update( colltype.schemaname, colltype)
		return colltype
	}
	
	@ProxyMethod
	public def remove( colltype ) {
		em.delete(colltype.schemaname, colltype);
		return colltype 
	}
	
	private void validate( colltype ) {
		checkDuplicate( colltype );
		em.validate( colltype.schemaname, colltype );
	}
	
	private void checkDuplicate( colltype ) {
		def data = em.sqlContext.createNamedQuery("collectiontype:checkDuplicateName").setParameters( colltype ).setMaxResults(1).singleResult;
		if( data ) {
			throw new Exception("Collection Type $colltype.name already exists.");
		}
	}
}