import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class FundService{
	
	@PersistenceContext('main')	
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = "fund"
	def final SCHEMA_VERSION = "1.0"
	
	@ProxyMethod
	public void init( searchText ){
		def general = [
			objid : 'GENERAL',
			schemaname : SCHEMA_NAME,
			schemaversion : SCHEMA_VERSION,
			docstate : 'APPROVED',
			fund : 'GENERAL',
			subfund : 'GENERAL',
			fundname : 'GENERAL'
		];
		
		def trust = [
			objid : 'TRUST',
			schemaname : SCHEMA_NAME,
			schemaversion : SCHEMA_VERSION,
			docstate : 'APPROVED',
			fund : 'TRUST',
			subfund : 'TRUST',
			fundname : 'TRUST'
		];
		
		def sef = [
			objid : 'SEF',
			schemaname : SCHEMA_NAME,
			schemaversion : SCHEMA_VERSION,
			docstate : 'APPROVED',
			fund : 'SEF',
			subfund : 'SEF',
			fundname : 'SEF'
		];
		
		em.create( SCHEMA_NAME, general );
		em.create( SCHEMA_NAME, trust );
		em.create( SCHEMA_NAME, sef );
	}
	
		
	@ProxyMethod
	public def getList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE fund LIKE $P{search}'],
				[' WHERE subfund LIKE $P{search}'],
				[' WHERE fundname LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('fund:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def read( fund ){
		fund = em.read(SCHEMA_NAME, fund )
		fund.bankacctrequired = fund.bankacctrequired == 1
		return fund 
	}
	
	@ProxyMethod
	public def saveCreate( fund ){
		fund.objid = "F" + new UID();
		fund.schemaname = SCHEMA_NAME;
		fund.schemaversion = SCHEMA_VERSION;
		
		if( fund.fund == fund.subfund )
			fund.fundname = fund.fund;
		else
			fund.fundname = fund.fund + "-" + fund.subfund;
			
		validate( fund );
		em.create( fund.schemaname, fund );
		
		return fund;
	}
	
	@ProxyMethod
	public def saveUpdate( fund ){
		validate( fund );
		
		em.update( fund.schemaname, fund)
		
		return fund;
	}
	
	@ProxyMethod
	public def remove( fund ){
		checkReferencedId( fund );
		em.delete( fund.schemaname, fund );
		return fund 
	}
	
	@ProxyMethod
	public def approve( objid ){
		def fund = em.read( 'fund:fund', [objid:objid] );
		
		fund.docstate = 'APPROVED';
		em.update( 'fund:fund', fund );
		
		return fund;
	}
	
	@ProxyMethod
	public List getFundsWithBankAccount() {
		return em.sqlContext.createNamedQuery('fund:getFundsWithBankAccount')
					.resultList
					.each{
						it.bankacctrequired = (it.bankacctrequired == 1 )
					}
	}
	
	private void validate( fund ){
		checkDuplicates( fund );
		em.validate(fund.schemaname, fund);
	}
	
	private void checkDuplicates( fund ){
		def data = em.sqlContext.createNamedQuery( 'fund:checkDuplicateFund' )
			.setParameter( 'objid', fund.objid )
			.setParameter( 'fund', fund.fund )
			.setParameter( 'subfund', fund.subfund )
			.singleResult;
		if( data.count > 0 ) throw new Exception( "Fund $fund.fundname already exists." );
	}
	
	private void checkReferencedId( fund ){
		def data = em.sqlContext.createNamedQuery('fund:checkReferencedId').setParameter("fundid", fund.objid).setMaxResults(1).singleResult
		if( data ) throw new Exception("Delete not allowed. Fund has already been referenced." )
	}
}
