import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class BankService{
	
	@PersistenceContext('main')	
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def schemaname = "bank:bank"
	def schemaversion = "1.0"
	
	@ProxyMethod
	public def getList( searchText, params ){
      params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE bankcode LIKE $P{search}'],
				[' WHERE bankname LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('bank:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def read( bank ){
		return em.sqlContext.createNamedQuery( 'bank:getById' ).setParameter( 'objid', bank.objid ).singleResult;
	}
	
	@ProxyMethod
	public def saveCreate( bank ){
      bank.objid = "B" + new UID();
      bank.schemaname = schemaname;
		bank.schemaversion = schemaversion;
		
		validate( bank );
		checkDuplicates( bank );
		em.create( bank.schemaname, bank );
		
		return bank;
	}
	
	@ProxyMethod
	public def saveUpdate( bank ){
		validate( bank )
      def ref = isReferenced( bank );
		if( ref )
         throw new Exception( 'Update not allowed. Bank is already referenced by a transaction.' )	;
		
		em.update( bank.schemaname, bank)
			
		return bank
	}
	
	@ProxyMethod
	public boolean validateEdit( bank ) {
	   def ref = isReferenced( bank );
		if( ref )
		   return true;
		   
		return false;
	}
	
	@ProxyMethod
	public def remove( bank ){
		try{
		   def ref = isReferenced( bank );
		   if( !ref ) {
	   			em.delete( bank.schemaname, bank );
	   			return bank 
	   		}
	   		else{
	   		   throw new Exception( 'Delete not allowed. Bank is already referenced by a transaction.' )	;
	   		}
		}catch( Throwable e ){
			throw e
		}
	}
	
	private void validate( bank ){
		em.validate(bank.schemaname, bank);
	}
	
	private void checkDuplicates( bank ){
		utilSvc.checkDuplicateFieldValue('Code', 'bank', 'bankcode', bank)
		utilSvc.checkDuplicateFieldValue('Code', 'bank', 'bankname', bank)
	}
	
	private boolean isReferenced( bank )  {
      def data = em.sqlContext.createNamedQuery( 'bank:checkIfReferenced' ).setParameters( ['bankid':bank.objid] ).singleResult;
      if( data.count != 0 ) return true;
      
	   return false;
	}
	
}
