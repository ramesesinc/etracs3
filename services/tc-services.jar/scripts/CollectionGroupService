import com.rameses.annotations.*;
import com.rameses.common.*;

public class CollectionGroupService
{
	@PersistenceContext("main")
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	@ProxyMethod
	public def getList( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('collectiongroup:get-list', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def saveCreate( entity ) {
		entity.objid = 'CG' + ( new java.rmi.server.UID() )
		em.create('collectiongroup', entity)
		if( entity.items ) {
			entity.items.each { 
				it.groupid = entity.objid 
				addItem(it) 
			}
		}
		return entity 
	}
	
	@ProxyMethod
	public def saveUpdate( entity ) {
		return em.update('collectiongroup', entity)
	}

	@ProxyMethod
	public def read( entity  ) {
		return em.read('collectiongroup', entity)
	}

	@ProxyMethod
	public def remove( entity ) {
		em.sqlContext.createNamedExecutor('collectiongroup:remove-all-items').setParameters(entity).execute()
		em.delete('collectiongroup', entity)
		return entity 
	} 
	
	@ProxyMethod
	public def getItems( entity ) {
		return em.sqlContext.createNamedQuery('collectiongroup:get-items').setParameters(entity).resultList
	}
	
	@ProxyMethod
	public def addItem( item ) {
		return em.create('collectiongroup:item', item)
	}
	
	@ProxyMethod
	public def removeItem( item ) {
		em.delete('collectiongroup:item', item)
		return item 
	}
	
	@ProxyMethod
	public def getIncomeAccounts( param ) {
		return em.sqlContext.createNamedQuery('collectiongroup:get-incomeaccounts').setParameters(param).resultList
	}
	
}



