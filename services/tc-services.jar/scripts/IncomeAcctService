import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class IncomeAcctService
{
	@PersistenceContext("main")
	def em
	
	@PersistenceContext('system')
	def sysem 
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def final SCHEMA_NAME = "incomeacct:incomeacct"
	def final SCHEMA_VERSION = "1.0"
	
	@ProxyMethod
	public def getList( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE acctno LIKE $P{search}'],
				[' WHERE accttitle LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('incomeacct:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ) {
		def acct = em.sqlContext.createNamedQuery("incomeacct:getById").setParameters( [objid:objid] ).singleResult
		if( ! acct ) throw new Exception('Income Account does not exists or has already been deleted.')
		if( acct.allowdiscount == null ) acct.allowdiscount = 0 
		return acct 
	}

	@ProxyMethod
	public def read( incomeacct ) {
		return open( incomeacct.objid )
	}
	
	@ProxyMethod
	public def saveCreate( incomeacct ) {
		incomeacct.objid = "IA" + new UID();
		incomeacct.schemaname = SCHEMA_NAME;
		incomeacct.schemaversion = SCHEMA_VERSION;
		if( incomeacct.fundname ) 
			incomeacct.fundid = getFundId( incomeacct.fundname );
		validate( incomeacct ) ;
		resetNgasAccount( incomeacct );
		resetSreAccount( incomeacct );
	
		em.create( incomeacct.schemaname, incomeacct);
		return incomeacct;
	}
	
	@ProxyMethod
	public def saveUpdate( incomeacct ) {
		incomeacct.fundid = getFundId( incomeacct.fundname );
		validate( incomeacct )
		resetNgasAccount( incomeacct )
		resetSreAccount( incomeacct )
		em.update(incomeacct.schemaname, incomeacct)
		return incomeacct
	}
	
	@ProxyMethod
	public def remove( incomeacct ) {
		checkReferencedId( incomeacct );
		em.delete(incomeacct.schemaname, incomeacct);
		return incomeacct
	}
	
	@ProxyMethod
	public def approve( incomeacct ) {
		incomeacct = em.read("incomeacct:incomeacct", incomeacct);
		incomeacct.docstate = 'APPROVED';
		em.update("incomeacct:incomeacct", incomeacct);
		return incomeacct;
	}
	
	private def getFundId( fundname ){
		return em.sqlContext.createNamedQuery("incomeacct:getFundId").setParameter("fundname", fundname).singleResult.objid;	
	}
	
	@ProxyMethod
	public def getFundList() {
		return em.sqlContext.createNamedQuery("incomeacct:getFund").resultList;
	}
	
	@ProxyMethod
	public def getSystemTypeList() {
		return [
			'ADVANCE_PAYMENT', 'BUSINESS_TAX',  'FEE',
			'INTEREST', 'OTHER_FEE', 
			'REG_FEE', 'SURCHARGE', 'TAX', 'TAX_CREDIT', 
            'RPT_BASIC','RPT_BASICPREV','RPT_BASICPRIOR', 
            'RPT_BASICINT', 'RPT_BASICPREVINT', 'RPT_BASICPRIORINT', 'RPT_BASICADVANCE',
            'RPT_SEF', 'RPT_SEFPREV', 'RPT_SEFPRIOR', 
            'RPT_SEFINT', 'RPT_SEFPREVINT', 'RPT_SEFPRIORINT', 'RPT_SEFADVANCE', 
		];
	}
	
	@ProxyMethod
	public def getIncomeAccountList( searchText, params ){
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' AND acctno LIKE $P{search}'],
				[' AND accttitle LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('incomeacct:getIncomeAccountList', filters, params, 'o.objid')
	}
	
	
	private void validate( incomeacct ) {
		em.validate(incomeacct.schemaname, incomeacct);
		utilSvc.checkDuplicateFieldValue('Account No.', 'incomeaccount', 'acctno', incomeacct)
		utilSvc.checkDuplicateFieldValue('Account Title', 'incomeaccount', 'accttitle', incomeacct)
		if( ! incomeacct.amounttype ) incomeacct.defaultvalue = 0.0;
		if( incomeacct.amounttype && incomeacct.defaultvalue < 0.0)  throw new Exception("Default Value must be greater than zero." );
		
	}
	
	private void checkReferencedId( incomeacct ){
		def data = em.sqlContext.createNamedQuery('incomeacct:checkReferencedId').setParameter("acctid", incomeacct.objid).singleResult
		utilSvc.checkDuplicateError( data.count, "Delete not allowed. Income Account has already been referenced." )
		def acct = sysem.sqlContext.createNamedQuery( 'incomeacct:getAccttitleAtRule' ).setParameter( 'acctid', '%' + incomeacct.objid + '%' ).singleResult
		if( acct ) throw new Exception('Delete not allowed. Income Account has already been referenced at Business Rule.')
	}
	
	private void throwDuplicateError( count, message ) {
		if( count > 0 ) throw new Exception( message );
	}
	
	private void resetNgasAccount( incomeacct ) {
		if( !incomeacct.ngasid )
			incomeacct.ngastitle = null
			
		if( ! incomeacct.ngastitle ) {
			incomeacct.ngasacctid = null;
		}
	}
	
	private void resetSreAccount( incomeacct ) {
		if( !incomeacct.sreid )
			incomeacct.sretitle = null
			
		if( ! incomeacct.sretitle ) {
			incomeacct.sreacctid = null;
		}
	}
}
