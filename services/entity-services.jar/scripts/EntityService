import com.rameses.annotations.*;
import com.rameses.common.*
import java.rmi.server.UID;


class EntityService 
{
	@PersistenceContext("main")
	def em;
	
	@Service("SequenceService")
	def seqService;
	
	@Service('LogService')
	def logService
	
	@Service('EntityCardService')
	def cardSvc 
	
	@Service('EntityContactService')
	def contactSvc 
	
	@Service('MessagingService')
	def msgSvc 
	
	@Service('Var')
	def var 
	
	def SCHEMANAME = 'entity:entity'
	def SCHEMAVERSION = '1.0'
	def MEMBER_SCHEMA = 'entity:member'
	
	def INDIVIDUAL_TYPE = 'individual'
	def JURIDICAL_TYPE = 'juridical'
	def MULTIPLE_TYPE = 'multiple'

	@ProxyMethod
	public def getList( textSearch, params ) {	
		if( ! textSearch ) {
			return getListByQueryName( "entity:getList", [:], params );
		}
		def result = [];
		if( (result = getListByQueryName("entity:getListByNo", [entityno:textSearch.padLeft(5,'0')], params))) return result;
		if( (result = getListByQueryName("entity:getListByName", [entityname:textSearch+'%'], params))) return result;
		return result;
	}
	
	@ProxyMethod
	public def open( objid, entitytype  ) {
		if( !entitytype ) {
			def result = em.sqlContext.createQuery('select entitytype from entity where objid=?').setParameter(1, objid).singleResult;
			if( !result ) return null;
			entitytype = result.entitytype;
		}			
		
		def entity = em.read( SCHEMANAME, [objid:objid, entitytype:entitytype] )
		loadContacts( entity )
		loadCards( entity )
		return entity 
	}
	
	@ProxyMethod
	public def create( entity  ) {
		entity.objid = buildId()
		entity.schemaname = SCHEMANAME
		entity.schemaversion = SCHEMAVERSION
		entity.entityno = seqService.getNextFormattedSeries( "ENTITY" )
		entity.entityname = buildName( entity )
				
		em.validate( entity.schemaname, entity )
		checkDuplicateEntityName( entity )
		
		em.create( entity.schemaname, entity )
		if( entity._members ) {
			//this is multiple, insert members 
			entity._members.each{ member -> 
				member.entityid = entity.objid 
				em.validate('entity:member', member)
				em.create('entity:member', member)
			}
		}
		saveContacts( entity )
		saveCards( entity )
		logService.log( 'CREATE', 'Entity', entity.objid ) 
		return entity
	}
	
	@ProxyMethod
	public def update( entity ) {
		em.validate( entity.schemaname, entity )
		
		entity.entityname = buildName( entity )
		em.update( entity.schemaname, entity, { diff -> 
				logService.logB('UPDATE', 'Entity', entity.objid, null, diff) 
			} as UpdateChangeHandler
		)
		removeDeletedContacts(entity ) 
		removeDeletedCards(entity ) 
		saveContacts( entity )		
		saveCards( entity )
		return entity
	}
	
	@ProxyMethod
	public void delete( entity ) {
		try {
			em.sqlContext.createNamedExecutor('entity:deleteContactByEntity').setParameters( entity).execute()
			em.sqlContext.createNamedExecutor('entity:deleteCardByEntity').setParameters( entity).execute()
			em.delete( entity.schemaname, entity )
			logService.log( 'DELETE', 'Entity', entity.entityname )
		}
		catch ( e ) {
			throw new Exception('Record cannot be deleted. It has been referenced by other record.', e )
		}
	}
	
	@ProxyMethod
	public def getPossibleDuplicateName( entity ) {
		if( ! entity.objid ) {
			entity.objid = buildId()
		}
		entity.entityname = buildName( entity )
		entity = em.sqlContext.createNamedQuery('entity:checkDuplicateName').setParameters(entity).setMaxResults(1).singleResult
		if( entity ) {
			def info = em.serializer.read( entity.info )
			entity.address = info.address 
		}
		return entity
	}
	 
	@ProxyMethod
	public List getMemberList( entityid ) {
		return em.sqlContext.createNamedQuery('entity:getMemberList').setParameter('entityid', entityid).resultList 
	}
	
	@ProxyMethod 
	public void saveMember( member ) {
		em.validate( MEMBER_SCHEMA, member )
		
		def oldmember = em.read( MEMBER_SCHEMA, member )
		if( oldmember )  {
			em.update( MEMBER_SCHEMA, member )
		}
		else {
			em.create( MEMBER_SCHEMA, member )
		}
	}
	
	@ProxyMethod
	public void deleteMember( member ) {
		em.delete( MEMBER_SCHEMA, member ) 
	}
	
	@ProxyMethod
	public List getCitizenshipList() {
		def list = em.sqlContext.createQuery('select objid from citizenship').resultList
		return list ? list*.objid : []
	}
	
	@ProxyMethod
	public List getCivilStatusList() {
		return ['SINGLE', 'MARRIED', 'WIDOW', 'WIDOWER']
	}
	
	@ProxyMethod
	public List getProfessionList() {
		def list = em.sqlContext.createQuery('select objid from profession').resultList
		return list ? list*.objid : []
	}
	
	@ProxyMethod
	public List getOrganizationTypes() {
		return ['SINGLE_PROPRIETORSHIP', 'PARTNERSHIP', 'CORPORATION', 'COOPERATIVE', 'ASSOCIATION', 'INCORPORATED', 'LGU']
	}
	
	@ProxyMethod
	public List getContactTypes() {
		return contactSvc.getList(null, null).objid 
	}
	
	@ProxyMethod
	public List getIdTypes() {
		return cardSvc.getList(null, null).objid 
	}
	
	/*=============================================
	**
	** Contacts 
	**
	============================================= */
	void saveContacts( entity ) {
		entity.contacts.each{ 
			if( it._isnew == true ) {
				it.entityid = entity.objid 
				it.objid = buildId()
				checkDuplicateContact( it )
				em.sqlContext.createNamedExecutor('entity:insertContact')
							.setParameters( it )
							.execute()
			}
		}
	}
	
	
	void checkDuplicateContact( contact){
		def contacttype = contactSvc.open( contact.contacttype )
		if( contacttype.isunique == true  ) {
			def dup = em.sqlContext.createNamedQuery('entity:getDuplicateContact')
								.setParameters(contact).singleResult 
			if( dup ) {
				throw new Exception(contact.contacttype + ' ' + contact.contact + ' is already assigned to ' + dup.entityname + '.')
			}
		}
	}
	
	void removeDeletedContacts( entity ){
		entity._deletedContacts.each{
			em.sqlContext.createNamedExecutor('entity:deleteContact').setParameters( it ).execute()
		}
	}
	
	void loadContacts( entity ) {
		entity.contacts = em.sqlContext.createNamedQuery('entity:getContactByEntity').setParameter('entityid', entity.objid ).resultList
	}
	
	
	/*=============================================
	**
	** ID CARD
	**
	============================================= */
	void saveCards( entity ) {
		entity.cards.each{ 
			if( it._isnew == true ) {
				it.entityid = entity.objid 
				it.objid = buildId()
				checkDuplicateCard( it )
				em.sqlContext.createNamedExecutor('entity:insertCard')
							.setParameters( it )
							.execute()
			}
		}
	}
	
	void checkDuplicateCard( card ){
		def dup = em.sqlContext.createNamedQuery('entity:getDuplicateCard')
							.setParameters(card).singleResult 
		if( dup ) {
			throw new Exception(card.cardtype + ' ID No. ' + card.cardno + ' is already assigned to ' + dup.entityname + '.')
		}
	}
	
	void checkDuplicateIDCard( card ){
		def dup = em.sqlContext.createNamedQuery('entity:getDuplicateCard')
							.setParameters(card).singleResult 
		if( dup ) {
			throw new Exception('Card is already assigned to ' + dup.entityname + '.')
		}
	}
	
	void removeDeletedCards( entity ){
		entity._deletedCards.each{
			em.sqlContext.createNamedExecutor('entity:deleteCard').setParameters( it ).execute()
		}
	}
	
	void loadCards( entity ) {
		entity.cards = em.sqlContext.createNamedQuery('entity:getCardByEntity').setParameter('entityid', entity.objid ).resultList
	}
	
	
	
	
	
	
	@ProxyMethod
	public void createEntityForMapping( parententity ) {
		parententity.mappings = []
		parententity.schemaname = 'entityformapping'
		parententity.schemaversion = '1.0'
		
		//do not create if record is already existing 
		//this means a request is rebroadcast 
		def old = em.read( parententity.schemaname, parententity )
		if( ! old ) {
			em.create( parententity.schemaname, parententity ) 
		}
	}
	
	
	@ProxyMethod
	public void createEntityMapping( data ) {
		def entity  	= data.entity 
		def domainid 	= data.domainid 
		def domainname 	= data.domainname 
		if( ! entity.mappings ) entity.mappings = []
		
		entity.mappings.each { mapping ->
			if( ! existsEntityMapping( entity.objid, domainid, mapping.entityid ) ) {
				insertEntityMapping( entity, domainid, domainname, mapping )
			}
		}
	}
	
	@ProxyMethod
	public void deleteEntityMapping( data ) {
		def parentid  	= data.parentid
		def domainid 	= data.domainid 
		def domainname 	= data.domainname 
		data.deleteditems.each{ di ->
			def params = [
				domainid : domainid,
				parentid : parentid,
				entityid : di.entityid,
			]
			em.sqlContext.createNamedExecutor('entitymapping:deleteMapping')
				.setParameters( params )
				.execute()
		}
	}
	
	void insertEntityMapping( entity, domainid, domainname, mapping ) {
		def newmapping = [
			objid 			: 'M' + new UID(),
			schemaname		: 'entitymapping',
			schemaversion	: '1.0',
			parentid     	: entity.objid,
			entityid		: mapping.entityid, 
			domainid		: domainid,
			domainname		: domainname,
			entityno		: mapping.entityno,
			entityname		: mapping.entityname,
			entityaddress	: mapping.entityaddress,
		]
		em.create( newmapping.schemaname, newmapping )
	}
	
	boolean existsEntityMapping( parentid, domainid, entityid ) {
		def entity = em.sqlContext.createNamedQuery('entitymapping:getMapping')
						.setParameters([parentid:parentid, domainid:domainid, entityid:entityid] )
						.singleResult 
		return entity != null 
	}
	
	
	
	@ProxyMethod 
	public void broadcastMappingRequest( entity ) {
		if ( entity ){
			entity.domainid   = var.lgu_index
			entity.domainname = var.lgu_name
			def attachment = [ parententity:entity ]
			def msg = msgSvc.createMessage('entity.create_entity_for_mapping', 'Create Entity for Mapping', attachment )
			msgSvc.broadcastToDomains( msg )
		}
	}
	
	@ProxyMethod
	public List getMappingList( entityid ) {
		if( entityid )
			return em.sqlContext.createNamedQuery('entity:getMappingList').setParameter('parentid', entityid ).resultList 
		return []
	}
	
	
	void checkDuplicateEntityNo( entity ) {
		def result = em.sqlContext.createNamedQuery('entity:checkDuplicateNo').setParameters([objid:entity.objid, entityno:entity.entityno]).singleResult
		if( result.icount >= 1 ) {
			throw new Exception('Duplicate entity no. found. Please save the record again.');
		}
	}
	
	void checkDuplicateEntityName( entity ) {
		def params = [ objid:entity.objid, entityname:entity.entityname, entityaddress:entity.entityaddress ]
		def data = em.sqlContext.createNamedQuery('entity:checkDuplicateName').setParameters( params ).singleResult 
		if( data ) throw new Exception( entity.entityname + ' already exists with Entity No. ' + data.entityno +'.\nDuplicate name and address combination is not allowed.')
	}
	
	def buildName( entity ) {
		if( entity.entitytype == INDIVIDUAL_TYPE ) {
			def name = entity.info.lastname + ', ' + entity.info.firstname 
			if( entity.info.middlename ) {
				name += ' ' + entity.info.middlename
			}
			return name
		}
		return entity.entityname
	}
	
	def getListByQueryName( query, criteria, params ) {
		if( ! params ) {
			params = [_start:0, _limit:50]
		}
		
		return em.sqlContext.createNamedQuery( query )
					.setParameters( criteria )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	def buildId() {
		return 'E' + new UID()
	}
}
