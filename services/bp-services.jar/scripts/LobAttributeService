import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class LobAttributeService {
	
	def final SCHEMA_NAME = 'lob:lobattribute';
	
	@PersistenceContext('main')
	def em;

	@PersistenceContext('system')
	def emsys;
	
	@ProxyMethod
	public def getList( search, def param ){
		def name = (search) ? search+'%' : '%';
		return em.sqlContext.createNamedQuery("lob:getAttributes")
			     .setParameters( [name: name] )
		         .resultList;
	}
	
	@ProxyMethod
	public def saveCreate(def attribute){
		attribute.objid = ( attribute.name ) ? attribute.name.replaceAll(' ', '_') : "ID";
		if( em.read( SCHEMA_NAME, [objid: attribute.objid] ) )
			throw new Exception("Attribute already exist.");
		
		em.validate( SCHEMA_NAME, attribute );
		em.create( SCHEMA_NAME, attribute );
		return attribute;
	}

	@ProxyMethod
	public def saveUpdate(def attribute){
		if( !em.read( SCHEMA_NAME, attribute ) ) 
			throw new Exception("Attribute is no longer exist.");
		em.update( SCHEMA_NAME, attribute );
		return attribute;
	}

	@ProxyMethod
	public def read( attribute ) {
		return em.read( SCHEMA_NAME, attribute)
	}

 
	@ProxyMethod
	public def remove(def attribute){
		if( !em.read( SCHEMA_NAME, [objid: attribute.objid] ) ) 
			throw new Exception("Attribute is no longer exist.");
		checkAttribInUsed( attribute )
		em.delete( SCHEMA_NAME, attribute );
		return attribute 
	}
	
	private void checkAttribInUsed( def attribute ){
		emsys.sqlContext.createNamedQuery( 'lob:getRuleConditions' ).resultList.each{ cond ->
			em.serializer.read( cond.conditions ).findAll{ it.attributes }.each{ attrib ->
				attrib.attributes.each{
					if( attribute.name.equals( it.name ) )
						throw new Exception( 'Delete not allowed. Attribute has already been referenced.' )
				}
				
			}

		}
	}
}