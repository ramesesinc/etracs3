import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class LOBService
{
	@PersistenceContext('main')
	def em

	@Service('ETRACSUtilService')
	def utilSvc
	
	def SCHEMA_NAME = 'lob'
	def SCHEMA_VERSION = '1.0'
	def DRAFT_STATE = 'DRAFT'
	def APPROVED_STATE = 'APPROVED'  
	
	@ProxyMethod
	public def getList( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('lob:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def getApprovedList( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' AND name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('lob:getApprovedList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public List lookup( searchText ) {
		def params = [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' AND name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('lob:lookup', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def read( lob ) {
		return em.read( SCHEMA_NAME, lob )
	}
	
	@ProxyMethod
	public def saveCreate( lob ) {
		lob.objid = 'L' + new UID()
		lob.schemaname = SCHEMA_NAME
		lob.schemaversion = SCHEMA_VERSION
		lob.docstate = DRAFT_STATE
		validate( lob )
		em.create( lob.schemaname, lob )
		return lob 
	}
	
	@ProxyMethod
	public def saveUpdate( lob ) {
		validate( lob )
		em.update( lob.schemaname, lob)
		return lob
	}
	
	@ProxyMethod
	public def remove( lob ) {
		def lineob = em.sqlContext.createNamedQuery('lob:getLobInUsed')
						.setParameter('objid', lob.objid).singleResult
		if( lineob )   
			throw new Exception('Delete not allowed. Line of Business has already been referenced.')
		
		em.delete(lob.schemaname, lob)   
		return lob 
	}
	
	@ProxyMethod
	public def approve( objid ) {
		def lob = em.read(SCHEMA_NAME, [objid:objid])
		if( !lob) throw new Exception('Line of Business not found.\nThe record might have been deleted. Please do a requery. ')
		if( lob.docstate == APPROVED_STATE ) throw new Exception('Record has already been approved.')
		lob.docstate = APPROVED_STATE
		em.update( lob.schemaname, lob )
		return lob 
	}
	
	@ProxyMethod
	public List getAttributes(searchText, params) {
		searchText = ( searchText ? searchText+'%' : '%' )
		return em.sqlContext.createNamedQuery('lob:getAttributes')
					.setParameter('name', searchText)
					.resultList
	}
	
	private void validate( lob ) {
		em.validate( lob.schemaname, lob )
		utilSvc.checkDuplicateFieldValue('LOB', 'lob', 'name', lob)
	}
}
