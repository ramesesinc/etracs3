import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class LobClassificationService
{
	@PersistenceContext('main')
	def em

	@Service('ETRACSUtilService')
	def utilSvc
	
	def SCHEMA_NAME = 'lobclassification'
	def SCHEMA_VERSION = '1.0'
	
	@ProxyMethod
	public def getList( searchText, params ) {
		params += [ search : (searchText ? searchText + '%' : '%' ) ]
		def filters = []
		if( searchText ) {
			filters = [
				[' WHERE name LIKE $P{search}'],
			]
		}
		return utilSvc.getListFromQuery('lobclassification:getList', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def read( lobclass ) {
		return em.read( lobclass.schemaname, lobclass)
	}
	
	@ProxyMethod
	public def saveCreate( lobclass ) {
		lobclass.objid = 'LC' + new UID()
		lobclass.schemaname = SCHEMA_NAME
		lobclass.schemaversion = SCHEMA_VERSION
		validate( lobclass )
		em.create( lobclass.schemaname, lobclass )
		return lobclass 
	}
	
	@ProxyMethod
	public def saveUpdate( lobclass ) {
		validate( lobclass )
		em.update( lobclass.schemaname, lobclass)
		return lobclass
	}
	
	@ProxyMethod
	public def remove( lobclass ) {
		try {
			em.delete(lobclass.schemaname, lobclass)
			return lobclass
		}
		catch( e ) {
			throw new Exception('Delete not allowed. Classification has already been referenced.')
		}
	}
	
	@ProxyMethod
	public List getClassifications() {
		return em.sqlContext.createNamedQuery('lobclassification:getClassifications').resultList
	}	
	
	private void validate( lobclass ) {
		em.validate( lobclass.schemaname, lobclass )
		utilSvc.checkDuplicateFieldValue('Classification', 'lobclassification', 'name', lobclass)
	}
}
