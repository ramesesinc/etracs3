import com.rameses.common.*
import com.rameses.annotations.*

public class BPReportService
{
	@PersistenceContext('main')
	def em 
	
	@Service('NumberService')
	def numSvc
	
	@Service('DateService')
	def dateSvc
	
	@Service('BPBillingService') 
	def billingSvc 
	
	@Service('Var')
	def var 
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	@Service('CertificationService')
	def certSvc
	
	def BPCERT_BARCODE_KEY = '012'
	def BPCERT_OPENER = 'bpcertification'
	
	
	@ProxyMethod 
	public List generateLobListing() {
		return em.sqlContext.createNamedQuery('bpreport:generateLobListing').resultList 
	}
	
	@ProxyMethod
	public List getTaxpayerMasterList( year ) {
		def varname_capital = "CAPITAL"
		def varname_gross = "GROSS"
		if( var.varname_capital ) varname_capital = var.varname_capital 
		if( var.varname_gross ) varname_gross = var.varname_gross 
		
		required( 'Year', year )
		validateYear( year )
		def list = em.sqlContext.createNamedQuery('bpreport:getTaxpayerMasterList')
					.setParameters([
						iyear: year, varname_capital: varname_capital, varname_gross:varname_gross 
					])
					.resultList
					.each { 
						it.capital = (it.capital ? numSvc.round( it.capital ) : 0.0 )
						it.gross = (it.gross?  numSvc.round( it.gross ) : 0.0 )
					}
		if( ! list ) throw new Exception('No records found.')
		return list 
	}
	
	@ProxyMethod
	public List getListOfEmployers( year ) {
		def varname_num_employee = "NO_EMPLOYEE"
		if( var.varname_num_employee ) varname_num_employee = var.varname_num_employee 
		
		required( 'Year', year )
		validateYear( year )
		def list = em.sqlContext.createNamedQuery('bpreport:getListOfEmployers')
					.setParameters([iyear: year, varname: varname_num_employee])
					.resultList
					.each { 
						it.numemployee =  utilSvc.toInteger( it.numemployee, 0)
					}
		if( ! list ) throw new Exception('No records found.')
		return list 
	}
	
	@ProxyMethod
	public List getApplicationListing( year, docstate, barangayid, classificationid, lobid  ) {
		def varname_capital = "CAPITAL"
		def varname_gross = "GROSS"
		if( var.varname_capital ) varname_capital = var.varname_capital 
		if( var.varname_gross ) varname_gross = var.varname_gross 
		
		def params 	= [ 
			iyear				: year, 
			docstate			: ( docstate ? docstate : '%' ),
			barangayid			: ( barangayid ? barangayid : '%' ),
			classificationid	: ( classificationid ? classificationid : '%' ),
			lobid 				: ( lobid  ? lobid : '%' ),
			varname_capital		: varname_capital,
			varname_gross		: varname_gross, 
		] 
		def list = em.sqlContext.createNamedQuery('bpreport:getApplicationListing')
					.setParameters( params )
					.resultList 
					.each {
						it.capital = (it.capital ? numSvc.round( it.capital ) : 0.0 )
						it.gross = (it.gross?  numSvc.round( it.gross ) : 0.0 )					
					}
		if( ! list ) throw new Exception('No records found.')
		return list 		
	}
	
	@ProxyMethod
	public List getLOBCountListing( barangayid, year, docstate, classification ) {
		def params 	= [ 
			iyear			: year,
			docstate		: ( docstate ? docstate : '%' ),
			barangayid		: ( barangayid ? barangayid : '%' ),
			classification	: ( classification ? classification : '%' )			
		]
		
		def list = em.sqlContext.createNamedQuery('bpreport:getLOBCountListing').setParameters( params ).resultList 
		if( ! list ) throw new Exception('No records found.')
		return list 		
	}
	
	@ProxyMethod
	public List getBusinessTaxpayerList( barangayid ) {
		barangayid = (barangayid ? barangayid : '%' )
		return em.sqlContext.createNamedQuery('bpreport:getBusinessTaxpayerList')
						.setParameter('barangayid', barangayid )
						.resultList
	}
	
	@ProxyMethod
	public List getApplicationForDelinquencyListing( barangayid ) {
		barangayid = (barangayid ? barangayid : '%' )
		return em.sqlContext.createNamedQuery('bpreport:getApplicationForDelinquencyListing')
						.setParameter('barangayid', barangayid )
						.resultList
	}
	
	@ProxyMethod
	public def buildDelinquency( billing ) {
		try {
			billing = billingSvc.getBilling( billing )
			def delinquencylist = []
			billing.items.each{ item -> 
				delinquencylist.add([
					iyear			: item.iyear, 
					appno			: item.appno,
					txntype			: item.txntype,
					txndate			: item.txndate, 
					taxpayername 	: billing.info.taxpayername,
					taxpayeraddress : billing.info.taxpayeraddress,
					tradename		: item.tradename,
					businessaddress	: item.address,
					amount			: item.totalamount,
					qtr1amount		: item.first_qtr_total,
					qtr2amount		: item.second_qtr_total,
					qtr3amount		: item.third_qtr_total,
					qtr4amount		: item.fourth_qtr_total,
					surcharge		: item.totalsurcharge,
					interest		: item.totalinterest,
					total			: item.grandtotal
				])
			}
			return delinquencylist
		}
		catch( e) {
			println e.message
			return []
		}
	}
	
	@ProxyMethod
	public def generateTopBusinessList( entity ){
		def VAR_CAPITAL = 'CAPITAL' 
		def VAR_GROSS = 'GROSS' 
		
		if( var.varname_capital ) VAR_CAPITAL = var.varname_capital
		if( var.varname_gross ) VAR_GROSS = var.varname_gross 
		
		entity.classification = entity.classification?.classification
		def reportdata = [:]
		reportdata.items = []
		reportdata.title = buildTitle( entity  )
		
		def params = [ 
			txntype	: entity.txntype, 
			topsize	: entity.topsize, 
			year	: entity.year,
			classification:( entity.classification ? entity.classification : '%' ),
			varname:( entity.txntype == 'NEW' ? VAR_CAPITAL : VAR_GROSS)	
		]
		
		em.sqlContext.createNamedQuery('bpreport:getBusinessTopList')
				.setParameters( params )
				.resultList.each{ 
					params.amount = it.amount 
					def topapps = em.sqlContext.createNamedQuery('bpreport:getBusinessTopListGroupByAmount').setParameters(params).resultList	
					reportdata.items.addAll( topapps)
				} 
		
		reportdata.total = reportdata.items.amount.sum()
		def ctr = 0
		def prvamt = -1
		reportdata.items.each{
			if( it.amount != prvamt ){
				prvamt = it.amount
				it.rankno = ++ctr
			}
			else{
				it.rankno = null
			}
		}
		
		if( !reportdata.items ) throw new Exception('No records found.')
		
		return reportdata
	}
	
	@ProxyMethod
	public def getComparativeList( param ){
		def reportdata = [:]
		checkComparativeYearRange( param )
		reportdata.type = param.type
		param.vartitle = param.varname.equals('GROSS') ? 'Gross Sales' : 'Capital Investment'
		reportdata.title = "Comparative Report on $param.vartitle by Classification".toString()
		param.sql_stmt = param.type.equals('ANNUALLY') ? 'getAnnually' : 'getQuarterly'
		reportdata.items = getComparativeResult( param )
		if( !reportdata.items ) throw new Exception( 'No Records found' )
		
		return reportdata
	} 
	
	@ProxyMethod
	public def getComparativeAssessmentList( def param ){
		def reportdata = [:]
		checkComparativeYearRange( param )
		reportdata.type = param.type
		reportdata.title = "Comparative Report on Assessment by Classification".toString()
		param.sql_stmt = param.type.equals('ANNUALLY') ? 'getAssessmentAnnually' : 'getAssessmentQuarterly'
		reportdata.items = getComparativeResult( param )
		if( !reportdata.items ) throw new Exception( 'No Records found' )
		
		return reportdata
	} 
	
	private void checkComparativeYearRange( def param ){
		if( param.yearfrom >= param.yearto ) 
			throw new Exception( 'Year From field should be earlier than the Year To field.' )
		else if( (param.yearto - param.yearfrom) > 1 ) 
			throw new Exception( 'Year comparative range should not be greater than one.' )
	}
	
	private def getComparativeResult( def param ){
		if( param.varname  == 'CAPITAL' && var.varname_capital )  param.varname = var.varname_capital
		if( param.varname  == 'GROSS' && var.varname_gross )  param.varname = var.varname_gross
		def result = em.sqlContext.createNamedQuery( 'bpreport:' + param.sql_stmt )
					.setParameters( param )
					.resultList
					.each{
						it.amountto = utilSvc.toDecimal( it.amountto, 0.0)
						it.amttoq1 = utilSvc.toDecimal( it.amttoq1, 0.0)
						it.amttoq2 = utilSvc.toDecimal( it.amttoq2, 0.0)
						it.amttoq3 = utilSvc.toDecimal( it.amttoq3, 0.0)
						it.amttoq4 = utilSvc.toDecimal( it.amttoq4, 0.0)
						it.amountfrom = utilSvc.toDecimal( it.amountfrom, 0.0)
						it.amtfrmq1 = utilSvc.toDecimal( it.amtfrmq1, 0.0)
						it.amtfrmq2 = utilSvc.toDecimal( it.amtfrmq2, 0.0)
						it.amtfrmq3 = utilSvc.toDecimal( it.amtfrmq3, 0.0)
						it.amtfrmq4 = utilSvc.toDecimal( it.amtfrmq4, 0.0)
					}
		return getAmtPercentage( result )  
	}
	
	private def getAmtPercentage( def data ){
		return data.each{
			if( it.amountto == 0.0 && it.amountfrom == 0.0 ){
				it.increaserate = 0.0
				it.percenttage = it.increaserate + '%'
			}
			else if( it.amountto == 0.0 ){
				it.increaserate = -100.0
				it.percenttage = it.increaserate + '%'
			}				
			else{
				it.increaserate = (( it.amountto - it.amountfrom ) / it.amountto * 100) 
				it.percenttage =  numSvc.format('0.00', it.increaserate) + '%'
			}
		}
	
	}
	
	/*========================================================================
	**
	** Summary of Business Permit
	**
	========================================================================*/
	@ProxyMethod
	public def generateBusinessPermitSummary( year ) {
		return em.sqlContext.createNamedQuery('bpreport:getBusinessPermitSummary')
					.setParameter('year', year)
					.resultList.each{
						it.newcount = utilSvc.toInteger( it.newcount, 0)
						it.renewcount = utilSvc.toInteger( it.renewcount, 0)
						it.retirecount = utilSvc.toInteger( it.retirecount, 0)
						it.sqtr = buildQtr( it.iqtr)
					}
	}
	
	
	
	/*========================================================================
	**
	** No Business Certification
	**
	========================================================================*/
	@ProxyMethod
	public void checkEntityOwnsBusiness( entity  ){
		def business = em.sqlContext.createNamedQuery('bpreport:getBusinessByTaxpayer')
							.setParameter('taxpayerid', entity.objid )
							.singleResult
		if( business ) {
			throw new Exception(entity.entityname + ' currently owns ' + business.tradename + ' located at ' + business.businessaddress + '.')
		}	
	}
	
	@ProxyMethod
	public def createNoBusinessCertificate( entity ){
		def serverDate = dateSvc.getServerDate()
		entity.opener = BPCERT_OPENER 
		entity.year = getFormalizedDate('yyyy', serverDate)
		entity.smonth = getFormalizedDate('MMMMM', serverDate)
		entity.sday = getFormalizedDate('d', serverDate)
		entity.ordate = dateSvc.parse('yyyy-MM-dd', entity.ordate)
		validateOrDate( entity.ordate )
		return certSvc.create( entity, 'BPCertification', BPCERT_BARCODE_KEY)
	}
	
	
	/*========================================================================
	**
	** Quarterly Paid Business Listing 
	**
	========================================================================*/
	@ProxyMethod
	public def generateQtrlyPaidBusinessListing( year ) {
		if( year == null  ) throw new Exception( 'Year is required.')
		if( year <= 0) throw new Exception('Year is invalid.')
		
		def list =  em.sqlContext.createNamedQuery('bpreport:getQtrlyPaidBusinessListing')
					.setParameter('year', year)
					.resultList
		if( ! list ) throw  new Exception('No records found.')
		return list 
	}
	
	
	
	
	
	def validateOrDate( ordate ){
		java.sql.Date date = new java.sql.Date( dateSvc.getServerDate().getTime() );
		if( ordate.time > date.time )
			throw new Exception("O.R. Date must be less than or equal to Current Date of ${date}. ");
	}
	
	def getFormalizedDate( def datepart, date ){
		def dt = new java.text.SimpleDateFormat( datepart ).format( date ).toString();
		
		if( 'd'.equals(datepart) || 'dd'.equals(datepart)){
			if( dt.matches('01|1|21|31') )
				return dt + 'st';
			else if( dt.matches('02|2|22') )
				return dt + 'nd';
			else if(dt.matches('03|3|23')) 
				return dt + 'rd';
			else return dt + 'th';
		}
		
		return dt;
	}
	
	
	@ProxyMethod          
	public def buildQtr( def qtr ){
		if( !qtr ) return
		else if( qtr.value == 1 )
            return '1st QTR'
        else if( qtr.value == 2 ) 
            return '2nd QTR'
        else if( qtr.value == 3 ) 
            return '3nd QTR'
        else return '4th QTR'
	}
	
	private def buildTitle( def param ){
		def	titleprefix = ( param.txntype == 'NEW' ? "NEW $param.classification" : "RENEWED $param.classification" )
		if( !param.classification )
			titleprefix = ( param.txntype == 'NEW' ? 'NEW BUSINESSES' : 'BUSINESS RENEWALS' )
		
		return "TOP $param.topsize " + titleprefix
	}
	
	@ProxyMethod
	public List getBarangayList() {
		return em.sqlContext.createNamedQuery('bpreport:getBarangayList').resultList 
	}
	
	@ProxyMethod
	public List getClassificationList() {
		return em.sqlContext.createNamedQuery('bpreport:getClassificationList').resultList 
	}
	
	void required( caption, value ) {
		if( ! value ) throw new Exception(caption + ' is required.')
	}
	
	void validateYear( year ) {
		def curryear = dateSvc.serverYear
		if( year > curryear ) throw new Exception('Year must not exceed ' + curryear + '.')
		
	}
	
}