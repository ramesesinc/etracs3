import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class DiscountTypeService{
	
	@PersistenceContext('main')	
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	@Service('LogService')
	def logService
	
	def SCHEMA_NAME = 'discounttype' 
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( ! params ) {
			params = [
				_start : 0,
				_limit : 25,
			]
		}
		searchText = (searchText ? searchText + '%' : '%' )
		params += [ search:searchText]
		def filters = [
			[' o.objid LIKE $P{search}'],
			[' o.discounttype LIKE $P{search}'],
		]
		return utilSvc.getListFromQuery('discounttype:getListByFilter', filters, params, 'o.objid')
	}
	
	@ProxyMethod
	public def open( objid ){
		def entity = em.read(SCHEMA_NAME, [objid:objid])
		if( ! entity ) throw new Exception('Discount Type does not exists or has already been deleted.')
		return entity 
	}
	
	@ProxyMethod
	public def create( entity ){
		em.validate(SCHEMA_NAME, entity )
		checkDuplicateObjid( entity )
		checkDuplicateType( entity )
		em.create(SCHEMA_NAME, entity )
		return entity 
	}
	
	@ProxyMethod
	public def update( entity  ){
		em.validate(SCHEMA_NAME, entity )
		checkDuplicateType( entity )
		em.update(SCHEMA_NAME, entity )
	}
	
	@ProxyMethod
	public void delete( entity  ) {
		def refentity = em.sqlContext.createNamedQuery('discounttype:checkReferencedItem')
								.setParameter('discounttypeid', entity.objid)
								.singleResult 
		if( refentity ) throw new Exception('Discount Type cannot be deleted. It is already referenced by a transaction ')
		
		em.delete( SCHEMA_NAME, entity )
	}
	
	void checkDuplicateObjid( entity ){
		def duplicate_msg = 'Discount Type already exists.'
		
		boolean duplicate = false 
		try {
			open( entity.objid)
			duplicate = true 
		}
		catch( e ) {
			duplicate = false 
		}
		if( duplicate == true ) throw new Exception(  duplicate_msg)
	}
	
	void checkDuplicateType( entity ){
		def duplicate_msg = 'Discount Type already exists.'
		def oldentity = em.sqlContext.createNamedQuery('discounttype:checkDuplicateType')
							.setParameters(entity)
							.singleResult 
		if( oldentity ) throw new Exception( duplicate_msg )
	}
}
