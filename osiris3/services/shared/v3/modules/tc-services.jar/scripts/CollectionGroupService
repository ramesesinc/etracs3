import com.rameses.annotations.*;
import com.rameses.common.*;

public class CollectionGroupService
{
	@PersistenceContext("main")
	def em
	
	
	@ProxyMethod
	public def getList( searchText, param ) {
		def qry;
		if( searchText ) {
			param.searchText = searchText + '%'
			qry = em.sqlContext.createNamedQuery('collectiongroup:get-list-byname')
		}
		else {
			qry = em.sqlContext.createNamedQuery('collectiongroup:get-list')
		}
		qry.setParameters(param)
		
		if( param._start ) qry.setFirstResult(param._start)
		if( param._limit ) qry.setMaxResults(param._limit)
		return qry.resultList
	}
	
	@ProxyMethod
	public def create( entity ) {
		em.create('collectiongroup', entity)
		if( entity.items ) {
			entity.items.each { 
				it.groupid = entity.objid 
				addItem(it) 
			}
		}
		return entity 
	}
	
	@ProxyMethod
	public def update( entity ) {
		return em.update('collectiongroup', entity)
	}

	@ProxyMethod
	public def open( objid ) {
		return em.read('collectiongroup', [objid:objid])
	}

	@ProxyMethod
	public void delete( entity ) {
		em.sqlContext.createNamedExecutor('collectiongroup:remove-all-items').setParameters(entity).execute()
		em.delete('collectiongroup', entity)
	} 
	
	@ProxyMethod
	public def getItems( entity ) {
		return em.sqlContext.createNamedQuery('collectiongroup:get-items').setParameters(entity).resultList
	}
	
	@ProxyMethod
	public def addItem( item ) {
		return em.create('collectiongroup:item', item)
	}
	
	@ProxyMethod
	public void removeItem( item ) {
		em.delete('collectiongroup:item', item)
	}
	
	@ProxyMethod
	public def getIncomeAccounts( param ) {
		return em.sqlContext.createNamedQuery('collectiongroup:get-incomeaccounts').setParameters(param).resultList
	}
	
}



