import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class RPTLedgerInterceptor
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
    @Service('RPTLedgerService')
    def svc 
	
	@Service('MessagingService')
	def msgSvc
	
	@Service('Var')
	def var 
	
	/*==============================================================
	** LOCAL INTERCEPTORS 
	==============================================================*/
	@After(pattern='RPTLedgerService.approve') 
	public void interceptApprove( evt ) {
		def ledger = evt.result 
		
		if( msgSvc.remoteConnectionActive() == false || var.lgu_type?.toLowerCase() != 'municipality'  ){
				return 
		}
		
		def data = [ ledger: svc.open( ledger.objid ) ]
		msgSvc.sendMessage( 'province-rptledger.approve', 'Approve remote RPT Ledger.', data  )
	}
	
	
	/*==============================================================
	** REMOTE INTERCEPTORS 
	==============================================================*/
	@After(pattern='MessagingService.onMessage', eval="#{ result.type.startsWith('province-rptledger') }") 
	public void interceptOnMessage( evt ) {
        def msg = evt.result 
		println "RPTLedgerInterceptor [${msg.type}]"
		try {
			if( msg.type == 'province-rptledger.approve') 
				approveProvinceRPTLedger( msg ) 
		}
		catch( e ) {
			println '='*50
            e.printStackTrace()
            msgSvc.errorProcessing( msg, e.message )
            throw e 
		}
	}
    
    void approveProvinceRPTLedger( msg ) {
		def ledger = msg.data.ledger
		deleteProvinceRPTLedger( ledger )
		createApprovedProvinceLedger( ledger )
		updateFAASLedgerReference( ledger )
		msgSvc.processedSuccessfully( msg )
		logSvc.log('ONLINE-APPROVAL', 'RPTLedger', ledger.objid  )
    }
    
	void deleteProvinceRPTLedger( ledger ) {
		em.sqlContext.createNamedExecutor('rptledger:deleteProvinceRPTLedgerItem').setParameter('faasid', ledger.faasid).execute()
		em.sqlContext.createNamedExecutor('rptledger:deleteProvinceRPTLedger').setParameter('faasid', ledger.faasid).execute()
	}
	
	void createApprovedProvinceLedger( ledger ){
		ledger.undercompromised = false  
		em.save( ledger.schemaname, ledger )
		ledger.ledgerItems.each{
			em.save(it.schemaname, it )
		}
	}
	
	void updateFAASLedgerReference( ledger ) {
		em.sqlContext.createNamedExecutor('rptledger:updateFAASLedgerReference')
				.setParameters([ledgerid:ledger.objid, objid:ledger.faasid])
				.execute()
				
		em.sqlContext.createNamedExecutor('rptledger:updateFAASListLedgerReference')
				.setParameters([ledgerid:ledger.objid, objid:ledger.faasid])
				.execute()
	}

}


