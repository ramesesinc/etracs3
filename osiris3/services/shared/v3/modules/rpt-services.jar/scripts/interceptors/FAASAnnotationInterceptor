import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class FAASAnnotationInterceptor
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
	@Service('FAASAnnotationService')
	def svc 
	
	@Service('MessagingService')
	def msgSvc
	
	@Service('Var')
	def var 
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	
	
	/*==============================================================
	** LOCAL INTERCEPTORS 
	==============================================================*/
	@After(pattern='FAASAnnotationService.approve') 
	public void interceptApprove( evt ) {
		if( utilSvc.toBoolean(var.remote_connection_active, false) ) {
			def annotation = evt.result 
			def data = [ 
				annotation : evt.result 
			]
			def msg = msgSvc.createMessage( 'faasannotation.post', 'Approve FAAS Annotation', data )
			updateReceiverInfo( msg, annotation )
			msgSvc.send( msg ) 
		}
	}
	
	void updateReceiverInfo( msg, annotation ) {
		if( 'province'.equalsIgnoreCase( var.lgu_type) ) {
			def info = svc.getFaasInfo( annotation.faasid ) 
			msg.receiverid = info?.lguid
			msg.receiver = [id:msg.receiverid, name:info?.lguname, type:info?.lgutype] 
		}
	}
	
	
	
	/*==============================================================
	** REMOTE INTERCEPTORS 
	==============================================================*/
	@After(pattern='MessagingService.onMessage', eval="#{ result.type.startsWith('faasannotation') }") 
	public void interceptOnMessage( evt ) {
        def msg = evt.result 
		println "FAASAnnotationInterceptor [${msg.type}]"
		
		try{
			if( msg.type == 'faasannotation.post') 
				svc.postRemoteAnnotation( msg.data.annotation )
			else
				throw new Exception('FAAS Annotation action ' + msg.type + ' is not yet supported.')
				
			msgSvc.processedSuccessfully( msg )
		}
		catch( e ) {
			println '='*50
            e.printStackTrace()
            msgSvc.errorProcessing( msg, e.message )
            throw e 
		}
	}
}


