import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class EntityMessageInterceptor
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
	@Service('MessagingService')
	def msgSvc 
	
    @Service('EntityService')
    def entitySvc

    def final REF_TYPE = 'EntityMapping'
	
	@After(pattern='MessagingService.onMessage', eval="#{result.type.matches('entity.create_entity_for_mapping')}") 
	public void interceptOnReceiveEntityCreateMapping( evt ) {
		def msg = evt.result 
		try {
			println 'Processing message -> ' + msg.type
			def parententity = msg.attachment.parententity 
			entitySvc.createEntityForMapping( parententity )
			logSvc.log( msg.type, REF_TYPE, parententity.objid )
			msgSvc.processedSuccessfully( msg )
		}
		catch( e ) {
            msgSvc.processError( msg, e )
        }
	}

	@After(pattern='MessagingService.onMessage', eval="#{result.type.matches('entity.process_mapping')}") 
	public void interceptOnReceiveEntityProcessMapping( evt ) {
		def msg = evt.result 
		try {
			println 'Processing message -> ' + msg.type
			entitySvc.createEntityMapping( msg.attachment )
			logSvc.log( msg.type, REF_TYPE, msg.attachment.entity.objid )
			msgSvc.processedSuccessfully( msg )
		}
		catch( e ) {
            msgSvc.processError( msg, e )
        }
	}


	@After(pattern='MessagingService.onMessage', eval="#{result.type.matches('entity.delete_mapping')}") 
	public void interceptOnReceiveEntityDeleteMapping( evt ) {
		def msg = evt.result 
		try {
			println 'Processing message -> ' + msg.type
			entitySvc.deleteEntityMapping( msg.attachment )
			logSvc.log( msg.type, REF_TYPE, msg.attachment.parentid )
			msgSvc.processedSuccessfully( msg )
		}
		catch( e ) {
            msgSvc.processError( msg, e )
        }
	}
    
}


