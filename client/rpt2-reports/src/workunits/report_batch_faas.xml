<workunit>
    <invokers>
        <invoker folderid="/explorer/report/rpt" caption="FAAS Batch Report" action="init" role="ASSESSOR_REPORTS" permission="faasreport.batch" index="13" />
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" icon="images/cancel.png" immediate="true" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="print" caption="Print" mnemonic="p" shortcut="ctrl + P" icon="images/doc-view.png" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="cancelPrinting" caption="Cancel Printing" icon="images/cancel.png" mnemonic="a" shortcut="ctrl + a" visibleWhen="#{mode == 'printing'}" />
       
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;
import com.rameses.rcp.framework.TaskManager;

class FAASBatchReportController
{
    @Binding
    def binding

    @Service("ReportParameterService")
    def svcParams
    
    @Service("FAASReportService")
    def svc
    
    @Service('FAASService')
    def faasSvc
    
    @Service('Var')
    def var 
   
    def lgu;
    def barangays;
    def barangay;
    def section;
    
    def msg 
    def mode 
    def faasTask;
    
    public void init() {
        mode='init';
    }
    
    def lguList
    def getLgus() {
        if( !lguList) {
            def lgutype = var.lgu_type.toLowerCase();            
            if( lgutype.matches('city')) 
                lguList = faasSvc.getDistricts();
            else if( lgutype.matches('city|municipality')) 
                lguList = faasSvc.getCityMunicipalityList();
            else if( lgutype.matches('province'))
                lguList = faasSvc.getMunicipalities();
            else 
                lguList = [];
        }
        return lguList;
    }
    
    public void setLgu( def lgu ) {
        this.lgu = lgu;
        barangays = faasSvc.getBarangayListByParentId(lgu.objid);
        binding.refresh();
    }
    
    def updateMessage = { msg ->
        this.msg = msg
        binding.refresh('msg')
    }
    
    def onFinish = { msg -> 
        this.msg = msg
        this.mode = 'init';
        binding.refresh();
    }
    
    def onError = { err ->
        this.mode = 'init';
        binding.refresh();
        MsgBox.err( err );
    }
    
    def cancelPrinting() {
        faasTask.interrupt = true;
        this.mode = 'init'
        msg = 'Printing of faas has been cancelled.  '
        binding.refresh();
    }
 
    public void print() {
        mode = 'printing';
        def params = [barangayid: barangay.objid];
        if( section )  {
            def formattedSection = "${section}".toString();
            def len = formattedSection.length();
            if( len < 2 ) 
                formattedSection = "0".multiply( 2-len ) + formattedSection;
            params.section = formattedSection;
        }
        faasTask = new FaasBatchTask([
                updateMessage:updateMessage,
                onError: onError,
                onFinish: onFinish, 
                interrupt: false, 
                svcParams: svcParams,
                svc: svc, 
                faaslist: faasSvc.getFaasIds(params) 
             ]);
        Thread t = new Thread( faasTask);
        t.start();
    }
       
}

class FaasBatchTask implements Runnable {
    
    def svcParams
    def svc;

    def faaslist;
    def reportdata;
    
    def updateMessage;
    def onError;
    def onFinish;
    boolean interrupt 
    

    public void run() {
        try { 
            while(!interrupt && !faaslist.isEmpty() ) {
                def o = faaslist.remove(0);
                reportdata = svc.getReportData( o.objid )
                
                report.viewReport()
                ReportUtil.print( report.report, false) ;
                
                updateMessage("Processing TD No. ${o.tdno} "  );
            }    
            def msg = "Finished..... " 
            if(interrupt) 
                msg = 'Faas printing has been interrupted.    '
            onFinish(msg );
       } catch(e) {
            onError( e );
       }
    }
    
     def report =[
        getReportName : { return getFaasReportName() },
        getSubReports : { return getFaasSubReports() },
        getReportData : { return reportdata },
        getParameters : { svcParams.getStandardParameter( OsirisContext.env.USERNAME ); }
    ] as ReportModel
    
    
    def getFaasReportName() {
        if( reportdata.rputype == 'mach' )
            return 'etracs2/rpt/report/faas/mach/FAASMach.jasper'
        if( reportdata.rputype == 'bldg' )
            return 'etracs2/rpt/report/faas/bldg/FAASBldg.jasper'
        if( reportdata.rputype == 'misc' )
            return 'etracs2/rpt/report/faas/misc/FAASMisc.jasper'
        return 'etracs2/rpt/report/faas/land/FAASLand.jasper'
    }
    
    def getFaasSubReports() {
        if( reportdata.rputype == 'bldg' ) {
            return [
                new SubReport( 'BuildingStructure', 'etracs2/rpt/report/faas/bldg/BuildingStructure.jasper'),
                new SubReport( 'AdditionalItem', 'etracs2/rpt/report/faas/bldg/AdditionalItem.jasper'),
                new SubReport( 'PropertyAssessment', 'etracs2/rpt/report/faas/bldg/PropertyAssessment.jasper'),
                new SubReport( 'AnnotationList', 'etracs2/rpt/report/faas/bldg/FAASAnnotationList.jasper'),
            ] as SubReport[]
        }
        if( reportdata.rputype == 'mach' ) {
            return [
                new SubReport( 'MachDetail', 'etracs2/rpt/report/faas/mach/MachDetail.jasper'),
                new SubReport( 'PropertyAppraisal', 'etracs2/rpt/report/faas/mach/PropertyAppraisal.jasper'),
                new SubReport( 'PropertyAssessment', 'etracs2/rpt/report/faas/mach/PropertyAssessment.jasper'),
                new SubReport( 'AnnotationList', 'etracs2/rpt/report/faas/mach/FAASAnnotationList.jasper'),
            ] as SubReport[]
        }
        if( reportdata.rputype == 'misc' ) {
            return [
                new SubReport( 'MiscPropertyAppraisal', 'etracs2/rpt/report/faas/misc/MiscPropertyAppraisal.jasper'),
                new SubReport( 'MiscAdjustment', 'etracs2/rpt/report/faas/misc/MiscAdjustment.jasper'),
                new SubReport( 'PropertyAssessment', 'etracs2/rpt/report/faas/misc/PropertyAssessment.jasper'),
                new SubReport( 'AnnotationList', 'etracs2/rpt/report/faas/misc/FAASAnnotationList.jasper'),
            ] as SubReport[]
        }
        
        return [
            new SubReport( 'LandAppraisal', 'etracs2/rpt/report/faas/land/LandAppraisal.jasper'),
            new SubReport( 'PlantTreesAppraisal', 'etracs2/rpt/report/faas/land/PlantTreesAppraisal.jasper'),
            new SubReport( 'LandAdjustment', 'etracs2/rpt/report/faas/land/LandAdjustment.jasper'),
            new SubReport( 'PropertyAssessment', 'etracs2/rpt/report/faas/land/PropertyAssessment.jasper'),
            new SubReport( 'AnnotationList', 'etracs2/rpt/report/faas/land/FAASAnnotationList.jasper'),
        ] as SubReport[]
    }
    
}

]]>        
        
    </code>
    <pages>
        <page  template="etracs2.rpt.report.ui.FAASBatchReportPage" />
    </pages>
</workunit>